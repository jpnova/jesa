<?php

/**
 * @file
 * This module provide a simple text used to give the link to the faq and to the contact page.
 */


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function block_jesa_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
  $blocks['renseignements'] = array(
    // info: The name of the block.
    'info' => t('Jesa: Informations'),
    // Block caching options (per role, per user, etc.)
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function block_jesa_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  variable_del('block_jesa_contact_adulte');
  variable_del('block_jesa_contact_jeune');  

  $form = array();
  if ($delta == 'renseignements') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['block_jesa_lien_faq'] = array(
      '#type' => 'textfield',
      '#title' => t('Link FAQ'),
      '#size' => 60,
      '#description' => t('Link (relative to the content nodes) to the faq. Normaly you shouldn\'t change it.'),
      '#default_value' => variable_get('block_jesa_lien_faq',  '../faq'),
    );
    $form['block_jesa_lien_contact'] = array(
      '#type' => 'textfield',
      '#title' => t('Link contact page'),
      '#size' => 60,
      '#description' => t('Link (relative to the content nodes) to the contact page. Normaly you shouldn\'t change it.'),
      '#default_value' => variable_get('block_jesa_lien_contact',  '../contact'),
    );
    $form['block_jesa_contact_adulte_uid'] = array(
      '#type'          => 'select',
      '#title'         => t('Adult event') . ' - ' . t('contact manager'),
      '#options'       => _block_jesa_list_manager('adultes'),
      '#description'   => t('Contact manager user ID'),
      '#default_value' => variable_get('block_jesa_contact_adulte_uid',  ''),
    );      
    $form['block_jesa_contact_jeune_uid'] = array(
      '#type'          => 'select',
      '#title'         => t('Youth event') . ' - ' . t('contact manager'),
      '#options'       => _block_jesa_list_manager('jeunes'),
      '#description'   => t('Contact manager user ID'),
      '#default_value' => variable_get('block_jesa_contact_jeune_uid',  ''),
    );      
      }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function block_jesa_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'renseignements') {
    // Have Drupal save the string to the database.
    variable_set('block_jesa_lien_faq', $edit['block_jesa_lien_faq']);
    variable_set('block_jesa_lien_contact', $edit['block_jesa_lien_contact']);
    variable_set('block_jesa_contact_adulte_uid', $edit['block_jesa_contact_adulte_uid']);
    variable_set('block_jesa_contact_jeune_uid', $edit['block_jesa_contact_jeune_uid']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function block_jesa_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'renseignements':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Informations');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = block_jesa_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function block_jesa_contents($which_block) {
	switch ($which_block) {
		case 'renseignements':
		  /**
		   * Texte de renseignements pour les stages. Ce texte n'est affiché que si la date du stage est dans le futur
		   * pour les stages dans le passé, on n'indique rien. (comme ce bloc est repris dans un quicktab, on ne l'affiche que
		   * s'il y a quelque chose à montrer.
		   */	
			
		  // TODO Utiliser un accès correct pour obtenir les valeurs du public cible (au travers de tokens ?)
		  // TODO Utiliser un accès correct pour obtenir les valeurs du titre du node
		  // Le lien vers la page de contact utilise les propriétés du module contact_forms qui permette de 
		  // passer la catégorie du contact (par exemple "Stage pour jeunes") et le sujet du mail (ici le titre 
		  // du noeux à savoir la période du stage et l'année.
		  // Cela se base sur le fait que la catégorie (Stage pour jeunes ou Stage pour adultes) contient le public cible
		  // Ce qui permet de construire dynamiquement la catégorie.
		  //  ATTENTION: il faut que les catégories Stage pour Jeunes et Stage pour adultes restent tel quel sans quoi le lien
		  //              ne fonctionnera pas (en d'autre termes il faudra le réécrire).	
			
			/** Test and debug
			$text = 'On [date:short], [user:name] read [node:title].';
			$user = user_load(1); // is this the best way to do it?
			$node = $node = menu_get_object('node');
			
			print_r($node);
			// [date:...] tokens use the current date automatically.
			$data = array('node' => $node, 'user' => $user);
			echo token_replace($text, $data);		 
			**/
			$result = '';
			$Category = '';
			$ContactCategory = '';
			$node = menu_get_object('node');
			
			if (isset($node->field_stage_dates['und'][0]['value'])) {
				// La date de stage existe => on controle si le stage est déjà passé ou non
				if (time() > strtotime($node->field_stage_dates['und'][0]['value'])) {
          //comme le stage est passé on ne montre plus de renseignement pour
          // l'incription
					$result = ''; 
				} else {
					//Controle si la catégorie du type de stage (Jeunes ou adultes) est configurée
					if (isset($node->field_stage_public['und'][0]['taxonomy_term']->name)) {
						$Category = $node->field_stage_public['und'][0]['taxonomy_term']->name;
						$ContactCategory = $Category .'/'. $node->title  ;
					}
          
          
          if ($Category == 'jeunes') {
            $account = user_load(variable_get('block_jesa_contact_jeune_uid',  ''));            
          }
          else {
            $account = user_load(variable_get('block_jesa_contact_adulte_uid',  ''));
          }
          
          $message = '';
          if (is_object($account)) {
            $message = '<p>' . t(
              'You can contact the event responsible: @firstname @name, phone @phone ', 
              array(
                '@firstname' => $account->field_prenom[LANGUAGE_NONE][0]['safe_value'],
                '@name'      => $account->field_nom[LANGUAGE_NONE][0]['safe_value'],
                '@phone'     => $account->field_tel[LANGUAGE_NONE][0]['safe_value'],
               )
             ) 
             . '<p/>';
          }
          
          
          
					$result = array(	'#type' => 'markup',
					'#markup' => 
									t('Consult our <a href="@FaqLink">FAQ</a> or send yours questions by <a href="@ContactLink">clicking here</a>.',
										array(
											'@FaqLink' =>  variable_get('block_jesa_lien_faq',  '../faq'),
											'@ContactLink' => variable_get('block_jesa_lien_contact',  '../contact' ) . '/Stage pour ' . $ContactCategory, 
											)
									) . 
                  $message  .
                  '<p>' .
									t('To make a subscription use the following <a href="@SubscriptionLink">link</a>.',
										array(
											'@SubscriptionLink' => '../content/inscriptions-stage-pour-' . $Category, 
											)
									)
                  . '<p/>',
                  
					);										
					unset($ContactCategory);	
					unset($Category);				
				}
			} else {
				// Pas de date de stage trouvée => on n'affiche rien
				$result = '';
			}
			unset($node);
			return $result;
		}
}

/**
*  Get the list of the managegers
*  
* 
* @param string $type 'Jeunes' or 'Adultes' (Kind of events)
* 
* @return an array containing the username (value) and the uid (key) of
* each manager
*/
function _block_jesa_list_manager($type) {
  //Recherche des gestionaires de stages 
  $return = array();
  // Type public : 9 pour les stages adultes, 10 pour les stages jeunes
  if ($type=='jeunes') {
    $type_public = 10;
  }
  else {
    $type_public = 9;
  }

  //Etape 2 : on recherche les utilisateurs 
  //        gestionnaire de stage (role id 7)
  //        qui comme parametre de type de public le même que celui du stage
  $emails = ''; 
  
  $query = 'SELECT DISTINCT(ur.uid) 
            FROM {users_roles} AS ur
            WHERE ur.rid IN (:rids)';
  $result = db_query($query, array(':rids' => array(7)));

  foreach ($result as $row) {
    $user = user_load($row->uid);
  	if (!empty($user->field_stage_public[LANGUAGE_NONE][0]['tid'])) {
  		if ($user->field_stage_public[LANGUAGE_NONE][0]['tid'] == $type_public) {
  			$return[$user->uid] = $user->name;					
  		}
  	}	
  }
 // watchdog('Jesa: _block_jesa_list_manager', t(' liste manager : @val', array('@val' =>  print_r($return) ,)), NULL , WATCHDOG_DEBUG);
  return $return;
}